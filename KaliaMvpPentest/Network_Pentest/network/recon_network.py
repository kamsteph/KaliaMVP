# new_module/recon.py
import subprocess
import os
from typing import Dict, Any

from back_end.utils.colored_logger import get_logger

logger = get_logger(__name__, component="RECON", region="NETWORK")

class Recon:
    """
    Lightweight reconnaissance module.
    - Checks host liveness (ping).
    - Runs very fast sanity checks before heavier scans.
    """
    def __init__(self):
        pass

    @staticmethod
    def is_host_alive(ip: str) -> bool:
        """
        Check if a host is alive using ping.
        Works across Linux/Windows by adjusting the ping param.
        """
        param = "-n" if os.name == "nt" else "-c"
        try:
            result = subprocess.call(
                ["ping", param, "1", ip],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            return result == 0
        except Exception as e:
            logger.error(f"Ping check failed for {ip}: {e}")
            return False

    def scan(self, ip: str,hints: dict=None) -> Dict[str, Any]:
        """
        Run lightweight recon on a host before vuln scanning.
        Returns dict with liveness + base info.
        """
        logger.info(f"[Recon] Starting reconnaissance for {ip}")

        alive = self.is_host_alive(ip)
        if not alive:
            logger.warning(f"[Recon] Host {ip} appears down.")
            return {"target": ip, "alive": False}

        logger.info(f"[Recon] Host {ip} is alive.")

        results={"target": ip, "alive": True}
        # Use attack surface hints
        if hints and "attack_surface" in hints:
            for surf in hints["attack_surface"]:
                if "Email servers" in surf["surface"]:
                    results["mx_enum"] = f"Checked MX records for {ip}"
                if "VPN gateways" in surf["surface"]:
                    results["vpn_ports"] = f"Scanned VPN ports for {ip}"

        return results
