# new_module/recon_scanner.py
import logging
from typing import Dict, Any

from Network_Pentest.network.Sub_Unit_Manager_Network.network_vuln_manager import VulnScanManager
from Network_Pentest.network.recon_network import Recon

logger = logging.getLogger("ReconScanner")


class ReconScanner:
    def __init__(self, vulnscan_mgr: VulnScanManager):
        self.recon = Recon()
        self.vulnscan_mgr = vulnscan_mgr

    async def scan(self, task_id: str, target_ip: str, hints: dict) -> Dict[str, Any]:
        """
        Perform recon on target, then delegate vuln scan.
        Includes task_id in results for traceability.
        """
        # Step 1: Liveness check
        recon_data = self.recon.scan(target_ip)
        if not recon_data.get("alive"):
            return {
                "task_id": task_id,
                "target": target_ip,
                "alive": False
            }

        # Step 2: Delegate full vuln scan to manager (with task_id)
        scan_results = await self.vulnscan_mgr.scan_target(task_id,hints=hints)

        # Step 3: Merge results
        return {
            "task_id": task_id,
            "target": target_ip,
            "alive": True,
            **scan_results
        }
