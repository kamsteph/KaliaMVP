import asyncio
import logging
from typing import List, Optional, Union

logger = logging.getLogger("API_WRAPPERS")

# Define top 10 common service ports
TOP_10_PORTS = [20, 21, 22, 23, 25, 53, 80, 110, 443, 3389]

class NaabuAPI:
    async def scan(self, target_ip: str, top_ports: Optional[int] = 10, ports: Optional[List[int]] = None) -> List[int]:
        """
        Run Naabu scan asynchronously.
        - top_ports: if provided and ports=None, scan first N common ports (default 10)
        - ports: custom list of ports
        Returns list of open ports.
        """
        if ports:
            ports_arg = ",".join(str(p) for p in ports)
            cmd = ["naabu", "-host", target_ip, "-ports", ports_arg, "-silent"]
        else:
            # Use top_ports value as index into TOP_10_PORTS
            ports_arg = ",".join(str(p) for p in TOP_10_PORTS[:top_ports])
            cmd = ["naabu", "-host", target_ip, "-ports", ports_arg, "-silent"]

        try:
            proc = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, _ = await proc.communicate()
            open_ports = []
            for line in stdout.decode().splitlines():
                line = line.strip()
                if line.isdigit():
                    open_ports.append(int(line))
                elif ':' in line:
                    try:
                        open_ports.append(int(line.split(':')[-1]))
                    except ValueError:
                        continue
            return open_ports
        except FileNotFoundError:
            logger.error("Naabu not found. Install or add to PATH.")
            return []

class MasscanAPI:
    async def scan(self, target_ip: str, top_ports: Optional[int] = 10, ports: Optional[List[int]] = None):
        """
        Run Masscan scan asynchronously.
        - top_ports: if provided and ports=None, scan first N common ports (default 10)
        - ports: custom list of ports
        Returns list of dicts with port/state.
        """
        if ports:
            ports_arg = ",".join(str(p) for p in ports)
        else:
            ports_arg = ",".join(str(p) for p in TOP_10_PORTS[:top_ports])

        cmd = ["masscan", target_ip, "-p", ports_arg, "--rate", "1000"]
        proc = await asyncio.create_subprocess_exec(*cmd, stdout=asyncio.subprocess.PIPE)
        stdout, _ = await proc.communicate()
        ports_found = [int(p) for p in stdout.decode().splitlines() if p.strip().isdigit()]
        return [{"port": p, "state": "open"} for p in ports_found]

class NmapAPI:
    async def scan(self, target_ip: str, ports: Optional[List[int]] = None, top_ports: Optional[int] = None):
        """
        Run Nmap scan asynchronously.
        - ports: custom list of ports
        - top_ports: optional index into TOP_10_PORTS (default None)
        """
        if ports:
            ports_arg = ",".join(str(p) for p in ports)
        elif top_ports:
            ports_arg = ",".join(str(p) for p in TOP_10_PORTS[:top_ports])
        else:
            ports_arg = ""

        cmd = ["nmap", "-p", ports_arg, target_ip] if ports_arg else ["nmap", target_ip]
        proc = await asyncio.create_subprocess_exec(*cmd, stdout=asyncio.subprocess.PIPE)
        stdout, _ = await proc.communicate()
        results = []
        for line in stdout.decode().splitlines():
            if "/tcp open" in line:
                port = int(line.split("/")[0])
                results.append({"port": port, "state": "open"})
        return results
