# new_module/event_bus.py
import logging
from typing import Dict, Any, Callable, List
from back_end.utils.colored_logger import get_logger

logger = get_logger(__name__, component="EVENTBUS", region="ROUTE")
logger.setLevel(logging.DEBUG)

class EventBus:
    def __init__(self):
        self.subscribers: Dict[str, List[Callable]] = {}
        logger.info("EventBus initialized")

    def subscribe(self, event_name: str, handler: Callable):
        """Register a handler for a given event."""
        if event_name not in self.subscribers:
            self.subscribers[event_name] = []
        self.subscribers[event_name].append(handler)
        logger.info(f"Handler {handler.__name__} subscribed to event '{event_name}'")

    def publish_task(self, task: Dict[str, Any]):
        """Publish a task to all subscribed handlers for a given region."""
        region = task.get("region")
        if not region or region not in self.subscribers:
            logger.error(f"No subscribers for region '{region}' or region not specified.")
            return

        logger.debug(f"Publishing task for region='{region}': {task}")
        for handler in self.subscribers[region]:
            # This is where the task is processed by the agent
            try:
                handler(task)
            except Exception as e:
                logger.exception(f"Error processing task for region '{region}' by handler '{handler.__name__}': {e}")

    def publish_event(self, event_name: str, payload: Dict[str, Any]):
        """Publish an event by name to all handlers subscribed to it."""
        if event_name not in self.subscribers:
            logger.warning(f"No subscribers for event '{event_name}'.")
            return
        logger.debug(f"Publishing event '{event_name}': {payload}")
        for handler in self.subscribers[event_name]:
            try:
                if callable(handler):
                    handler(payload)
            except Exception as e:
                logger.exception(f"Error in handler '{handler.__name__}' for event '{event_name}': {e}")
