import 'package:flutter/material.dart';

import '../DTO/ToolChoice.dart';
import 'package:file_picker/file_picker.dart';
import 'Upload_button.dart';
import 'package:google_fonts/google_fonts.dart';

class ScopeCardWidget extends StatefulWidget {
  final ScopeConfig card;
  final int index;
  final VoidCallback onRemove;
  final Function(String category, String area) onRemoveArea;
  final Function(BuildContext context, ScopeConfig card) onAddArea;

  const ScopeCardWidget({
    super.key,
    required this.card,
    required this.index,
    required this.onRemove,
    required this.onRemoveArea,
    required this.onAddArea,
  });

  @override
  State<ScopeCardWidget> createState() => _ScopeCardWidgetState();
}

class _ScopeCardWidgetState extends State<ScopeCardWidget> {
  @override
  Widget build(BuildContext context) {
    final card = widget.card;

    return Card(
      margin: const EdgeInsets.symmetric(vertical: 12),
      elevation: 6,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text("Select the scope of definition",style: TextStyle(fontSize:20,fontWeight: FontWeight.bold)),
            // --- Scope Selector (Stylish) ---
            stylishSegmentedScope(
              selected: card.scope,
              onChanged: (newScope) {
                setState(() => card.scope = newScope);
              },
            ),
            const SizedBox(height: 16),

            Text("Parameter(s)",style: TextStyle(fontSize:20,fontWeight: FontWeight.bold)),
            const SizedBox(height: 10),
            // --- IP Input ---
            TextFormField(
              controller: card.ipRangeController,
              decoration: InputDecoration(
                labelText: "Target IP / Range",
                labelStyle: GoogleFonts.poppins(fontWeight: FontWeight.w500),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
            const SizedBox(height: 16),

            // --- Grey & White: Insider Files ---
            if (card.scope == "grey" || card.scope == "white") ...[
              genAIUploadButton(
                title: "Upload Insider Files",
                count: card.insiderFiles.length,
                onTap: () async {
                  final result =
                  await FilePicker.platform.pickFiles(allowMultiple: true);
                  if (result != null) {
                    setState(() => card.insiderFiles.addAll(result.files));
                  }
                },
              ),
              _buildFileList(
                files: card.insiderFiles,
                hint:
                "Insider files may include: VPN configs (.ovpn), employee creds (.txt), insider docs (.pdf)",
              ),
              const SizedBox(height: 12),
            ],

            // --- White Only: Codebase Files ---
            if (card.scope == "white") ...[
              genAIUploadButton(
                title: "Upload Codebase Files",
                count: card.codebaseFiles.length,
                onTap: () async {
                  final result =
                  await FilePicker.platform.pickFiles(allowMultiple: true);
                  if (result != null) {
                    setState(() => card.codebaseFiles.addAll(result.files));
                  }
                },
              ),
              _buildFileList(
                files: card.codebaseFiles,
                hint:
                "Codebase files may include: source code (.zip, .tar.gz), repos (.git), configs (.yml)",
              ),
            ],

            const SizedBox(height: 16),

            // --- Header Row ---
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  "Scope Card #${widget.index + 1}",
                  style: GoogleFonts.poppins(
                    fontWeight: FontWeight.w700,
                    fontSize: 18,
                  ),
                ),
                Row(
                  children: [
                    IconButton(
                      icon: const Icon(Icons.settings, color: Colors.blue),
                      onPressed: _openAdvancedSettings,
                    ),
                    IconButton(
                      icon: const Icon(Icons.close, color: Colors.red),
                      onPressed: widget.onRemove,
                    ),
                  ],
                ),
              ],
            ),

            const SizedBox(height: 12),

            // --- Toggle Full vs Custom ---
            Row(
              children: [
                Switch(
                  value: card.isFullPentest,
                  onChanged: (val) {
                    setState(() {
                      card.isFullPentest = val;
                      if (val) {
                        // backup then clear
                        card.backupAreas = Map.from(card.selectedAreas);
                        card.selectedAreas.clear();
                      } else {
                        // restore
                        card.selectedAreas = Map.from(card.backupAreas);
                      }
                    });
                  },
                ),
                Text("Full Pentest", style: GoogleFonts.poppins(fontSize: 15)),
              ],
            ),
            const SizedBox(height: 8),

            if (card.isFullPentest)
              Text("Full Pentest selected",
                  style: GoogleFonts.poppins(
                      fontSize: 14,
                      fontWeight: FontWeight.w500,
                      color: Colors.green)),

            if (!card.isFullPentest)
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text("Selected Areas:",
                      style: GoogleFonts.poppins(
                          fontWeight: FontWeight.w600, fontSize: 15)),
                  const SizedBox(height: 6),
                  ...card.selectedAreas.entries.map((entry) {
                    final category = entry.key;
                    final areas = entry.value;
                    return Wrap(
                      spacing: 6,
                      runSpacing: 6,
                      children: [
                        for (var area in areas)
                          Chip(
                            label: Text("$area ($category)",
                                style: GoogleFonts.poppins(fontSize: 13)),
                            onDeleted: () =>
                                widget.onRemoveArea(category, area),
                          ),
                      ],
                    );
                  }),
                  const SizedBox(height: 10),
                  ActionChip(
                    avatar: const Icon(Icons.add, size: 18, color: Colors.blue),
                    label: Text("Add Surface Area",
                        style: GoogleFonts.poppins()),
                    onPressed: () =>
                        widget.onAddArea(context, widget.card),
                  ),
                ],
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildFileList({
    required List files,
    required String hint,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        if (files.isNotEmpty)
          ...files.map((f) => ListTile(
            dense: true,
            leading: const Icon(Icons.insert_drive_file,
                color: Colors.blueAccent),
            title: Text(f.name,
                style: GoogleFonts.poppins(fontSize: 13)),
          )),
        Padding(
          padding: const EdgeInsets.only(top: 6),
          child: Text(
            hint,
            style: GoogleFonts.poppins(
                fontSize: 12, color: Colors.grey.shade600),
          ),
        ),
      ],
    );
  }

  void _openAdvancedSettings() {
    showDialog(
      context: context,
      builder: (ctx) {
        return StatefulBuilder(
          builder: (context, setState) {
            return Dialog(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              elevation: 8,
              child: Padding(
                padding: const EdgeInsets.all(20),
                child: SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text("Advanced Configuration",
                          style: GoogleFonts.poppins(
                              fontWeight: FontWeight.w600, fontSize: 18)),
                      const SizedBox(height: 16),

                      // Toggle advanced mode
                      SwitchListTile(
                        title: Text("Enable Advanced Mode",
                            style: GoogleFonts.poppins()),
                        value: widget.card.isAdvanced,
                        onChanged: (val) =>
                            setState(() => widget.card.isAdvanced = val),
                      ),

                      if (widget.card.isAdvanced) ...[
                        const Divider(),

                        // Scan aspects
                        Text("Scan Aspects",
                            style: GoogleFonts.poppins(
                                fontWeight: FontWeight.w600, fontSize: 14)),
                        const SizedBox(height: 6),
                        CheckboxListTile(
                          title: Text("All", style: GoogleFonts.poppins()),
                          value: widget.card.allAspects,
                          onChanged: (val) {
                            setState(() {
                              widget.card.allAspects = val!;
                              widget.card.assetEnum = val;
                              widget.card.reachability = val;
                              widget.card.deepScan = val;
                            });
                          },
                        ),
                        CheckboxListTile(
                          title: Text("Asset Enumeration",
                              style: GoogleFonts.poppins()),
                          value: widget.card.assetEnum,
                          onChanged: widget.card.allAspects
                              ? null
                              : (val) => setState(
                                  () => widget.card.assetEnum = val!),
                        ),
                        CheckboxListTile(
                          title:
                          Text("Reachability", style: GoogleFonts.poppins()),
                          value: widget.card.reachability,
                          onChanged: widget.card.allAspects
                              ? null
                              : (val) => setState(
                                  () => widget.card.reachability = val!),
                        ),
                        CheckboxListTile(
                          title: Text("Deep Scan", style: GoogleFonts.poppins()),
                          value: widget.card.deepScan,
                          onChanged: widget.card.allAspects
                              ? null
                              : (val) => setState(
                                  () => widget.card.deepScan = val!),
                        ),
                        const Divider(),

                        // Port selection
                        Text("Port Selection",
                            style: GoogleFonts.poppins(
                                fontWeight: FontWeight.w600, fontSize: 14)),
                        const SizedBox(height: 6),
                        DropdownButtonFormField<String>(
                          initialValue: widget.card.portMode,
                          decoration: InputDecoration(
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          items: ["top10", "all", "custom"]
                              .map((p) => DropdownMenuItem(
                              value: p,
                              child: Text(p, style: GoogleFonts.poppins())))
                              .toList(),
                          onChanged: (val) =>
                              setState(() => widget.card.portMode = val!),
                        ),
                        if (widget.card.portMode == "custom") ...[
                          const SizedBox(height: 8),
                          TextFormField(
                            controller: widget.card.customPortsController,
                            decoration: InputDecoration(
                              labelText: "Custom Ports (comma-separated)",
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                            ),
                          ),
                        ],
                        const Divider(),

                        // Packet type
                        Text("Packet Type",
                            style: GoogleFonts.poppins(
                                fontWeight: FontWeight.w600, fontSize: 14)),
                        const SizedBox(height: 6),
                        DropdownButtonFormField<String>(
                          initialValue: widget.card.packetType,
                          decoration: InputDecoration(
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          items: ["TCP", "UDP", "Both"]
                              .map((p) => DropdownMenuItem(
                              value: p,
                              child: Text(p, style: GoogleFonts.poppins())))
                              .toList(),
                          onChanged: (val) =>
                              setState(() => widget.card.packetType = val!),
                        ),
                      ],
                    ],
                  ),
                ),
              ),
            );
          },
        );
      },
    );
  }
}


