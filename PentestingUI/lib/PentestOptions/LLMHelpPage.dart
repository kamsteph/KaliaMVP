import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';

class LLMSurfaceHelpPage extends StatefulWidget {
  const LLMSurfaceHelpPage({super.key});

  @override
  State<LLMSurfaceHelpPage> createState() => _LLMSurfaceHelpPageState();
}

class _LLMSurfaceHelpPageState extends State<LLMSurfaceHelpPage> {
  final TextEditingController _controller = TextEditingController();
  String? _mappedSurface;
  String? _definition;

  Future<void> _sendToBackend() async {
    final userText = _controller.text.trim();
    if (userText.isEmpty) return;

    try {
      final response = await http.post(
        Uri.parse("http://127.0.0.1:8000/translate"), // adjust host/port
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({"text": userText}),
      );

      if (response.statusCode == 200) {
        final result = jsonDecode(response.body);
        setState(() {
          _mappedSurface = result["surface"];
          _definition = result["definition"];
          _controller.clear();
        });
      } else {
        throw Exception("Backend error: ${response.body}");
      }
    } catch (e) {
      debugPrint("Error calling backend: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Describe your attack surface")),
      body: Column(
        children: [
          // Display results in the main area
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    if (_mappedSurface != null) ...[
                      Text("Suggested area: $_mappedSurface",
                          style: const TextStyle(
                              fontSize: 16, fontWeight: FontWeight.bold)),
                      const SizedBox(height: 8),
                      Text(_definition ?? "",
                          style: const TextStyle(
                              fontSize: 14, color: Colors.black87)),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: () {
                          Navigator.pop(context, _mappedSurface);
                        },
                        child: const Text("Use this"),
                      )
                    ]
                  ],
                ),
              ),
            ),
          ),

          // Input at the bottom like ChatGPT
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(12),
              child: TextField(
                controller: _controller,
                minLines: 2,
                maxLines: 4,
                decoration: InputDecoration(
                  hintText: "Type where you want the pentest to focus...",
                  filled: true,
                  fillColor: Colors.grey.shade100,
                  contentPadding:
                  const EdgeInsets.symmetric(vertical: 14, horizontal: 20),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(30), // rounded
                    borderSide: BorderSide.none,
                  ),
                  suffixIcon: IconButton(
                    icon: const Icon(Icons.send, color: Colors.blue),
                    onPressed: _sendToBackend,
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
