import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

import '../DTO/AttackSurface.dart';
import '../DTO/ToolChoice.dart';
import '../KaliaPentesting/NetworkPentest.dart';
import '../constants/network_categories.dart';
import 'LLMHelpPage.dart';

class NetworkPentestAreasPage extends StatefulWidget{
  final ScopeConfig scopeCard;
  const NetworkPentestAreasPage({super.key,required this.scopeCard});

  @override
  State<NetworkPentestAreasPage> createState() =>
      _NetworkPentestAreasPageState();
}

class _NetworkPentestAreasPageState extends State<NetworkPentestAreasPage> {

  final List<Map<String, dynamic>> networkAreas = [
    {"name": "Open ports", "icon": Icons.router},
    {"name": "Network services (SMB, FTP, DNS, SNMP)", "icon": Icons.dns},
    {"name": "Firewalls, IDS/IPS", "icon": Icons.security},
    {"name": "Routers/switches", "icon": Icons.settings_ethernet},
    {"name": "Wireless networks", "icon": Icons.wifi},
    {"name": "VPN gateways", "icon": Icons.vpn_lock},
    {"name": "Load balancers", "icon": Icons.swap_horiz},
    {"name": "Email servers", "icon": Icons.email},
    {"name": "Web servers & proxies", "icon": Icons.cloud},
    {"name": "Databases", "icon": Icons.storage},
  ];

  final Set<String> _selectedAreas = {};
  bool _isFullPentest = false;

  void _toggleAreaSelection(String category, String area) {
    setState(() {
      final selectedAreas = widget.scopeCard.selectedAreas;
      selectedAreas.putIfAbsent(category, () => []);
      if (selectedAreas[category]!.contains(area)) {
        selectedAreas[category]!.remove(area);
        if (selectedAreas[category]!.isEmpty) {
          selectedAreas.remove(category);
        }
      } else {
        selectedAreas[category]!.add(area);
      }

      _isFullPentest = false; // disable full pentest if manually selecting
      widget.scopeCard.isFullPentest = _isFullPentest;
    });
  }

  void _toggleFullPentest() {
    setState(() {
      _isFullPentest = !_isFullPentest;
      widget.scopeCard.isFullPentest = _isFullPentest;
      if (_isFullPentest) widget.scopeCard.selectedAreas.clear();
    });
  }

  @override
  Widget build(BuildContext context) {
    const double borderRadiusValue = 16;

    return Scaffold(
      appBar: AppBar(
        title: const Text("Network Pentest Attack Areas"),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // --- Select All Button ---
            SizedBox(
              width: 1000,
              child: ElevatedButton(
                onPressed: _toggleFullPentest,
                style: ElevatedButton.styleFrom(
                  backgroundColor:
                  _isFullPentest ? Colors.blue.shade800 : Colors.blue.shade300,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(borderRadiusValue),
                  ),
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
                child: Text(
                  "Select All (Full Pentest)",
                  style: GoogleFonts.openSans(
                      fontSize: 16, fontWeight: FontWeight.w600),
                ),
              ),
            ),
            const SizedBox(height: 20),

            // --- Grid of cards ---
            Expanded(
              child: Center(
                child:ConstrainedBox(
                  constraints: const BoxConstraints(maxWidth: 1000),
                child: GridView.builder(
                  itemCount: networkCategories.length,
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    mainAxisExtent: 200,
                    crossAxisCount: 2,
                    crossAxisSpacing: 16,
                    mainAxisSpacing: 16,
                    childAspectRatio: 1,
                  ),
                  itemBuilder: (context, index) {
                    final categoryName = networkCategories.keys.elementAt(index);
                    final category = networkCategories[categoryName]!;
                    final icon = category["icon"] as IconData;

                    return GestureDetector(
                      onTap: () async {
                        await Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (_) => NetworkAreas(
                              categoryName: categoryName,
                              areas: List<Map<String, dynamic>>.from(category["areas"]),
                              scopeCard: widget.scopeCard, // Pass the card by reference
                            ),
                          ),
                        );
                        // This will force a rebuild when the user returns
                        setState(() {});
                      },
                      child: Card(
                        elevation: 4,
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(borderRadiusValue)),
                        child: Center(                           // Display the icon here
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(icon, size: 50), // Display the icon here
                              const SizedBox(height: 8),
                              Text(categoryName, style: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600)),
                            ],
                          ),
                        ),
                      ),
                    );
                  },
                ),
                )
              )
            ),

            // --- Continue Button ---
            const SizedBox(height: 20),
            ElevatedButton(
                onPressed: (!_isFullPentest && widget.scopeCard.selectedAreas.isEmpty)
                    ? null
                    : () {
                      final attackSurface = _isFullPentest
                          ? const AttackSurface.full()
                          : AttackSurface.custom(_selectedAreas.toList());

                      Navigator.pop(context, attackSurface);

                },

              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green.shade600,
                minimumSize: const Size(double.infinity, 50),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(borderRadiusValue),
                ),
              ),
              child: const Text("Continue", style: TextStyle(fontSize: 18)),
            ),
          ],
        ),
      ),
    );
  }
}

class NetworkAreas extends StatefulWidget {
  final String categoryName;
  final List<Map<String, dynamic>> areas;
  final ScopeConfig scopeCard;

  const NetworkAreas({
    super.key,
    required this.categoryName,
    required this.areas, required this.scopeCard,
  });

  @override
  State<NetworkAreas> createState() => _NetworkAreasState();
}

class _NetworkAreasState extends State<NetworkAreas> {
  final Set<String> _selectedAreas = {};
  bool _isFullPentest = false;

  void _toggleAreaSelection(String area) {
    setState(() {
      // Add the new area to the scopeCard's selectedAreas map
      final selectedAreas = widget.scopeCard.selectedAreas;
      selectedAreas.putIfAbsent(widget.categoryName, () => []); // Ensure the category list exists
      if (selectedAreas[widget.categoryName]!.contains(area)) {
        selectedAreas[widget.categoryName]!.remove(area);
        if (selectedAreas[widget.categoryName]!.isEmpty) {
          selectedAreas.remove(widget.categoryName); // Remove category if no areas are selected
        }
      } else {
        selectedAreas[widget.categoryName]!.add(area);
      }

      _isFullPentest = false;
    });
  }

  void _toggleFullPentest() {
    setState(() {
      _isFullPentest = !_isFullPentest;
      if (_isFullPentest) _selectedAreas.clear();
    });
  }

  @override
  Widget build(BuildContext context) {
    const double borderRadiusValue = 16;

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.categoryName),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Full Pentest Button
            SizedBox(
              width: 1000,
              child: ElevatedButton(
                onPressed: _toggleFullPentest,
                style: ElevatedButton.styleFrom(
                  backgroundColor:
                  _isFullPentest ? Colors.blue.shade800 : Colors.blue.shade300,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(borderRadiusValue),
                  ),
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
                child: Text(
                  "Select All (Full Pentest)",
                  style: GoogleFonts.openSans(
                      fontSize: 16, fontWeight: FontWeight.w600),
                ),
              ),
            ),
            const SizedBox(height: 20),

            // Areas Grid
            Expanded(
              child: Center(
                child: ConstrainedBox(
                  constraints: const BoxConstraints(maxWidth: 1000),
                  child: GridView.builder(
                    itemCount: widget.areas.length,
                    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                      mainAxisExtent: 200,
                      crossAxisCount: 2,
                      crossAxisSpacing: 16,
                      mainAxisSpacing: 16,
                      childAspectRatio: 1,
                    ),
                    itemBuilder: (context, index) {
                      final area = widget.areas[index]["name"];
                      final icon = widget.areas[index]["icon"];
                      final categoryName = networkCategories.keys.elementAt(index);
                      final isSelected = widget.scopeCard.selectedAreas[widget.categoryName]?.contains(area) ?? false;

                      return GestureDetector(
                        onTap:  () => _toggleAreaSelection(area),
                        child: Card(
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(borderRadiusValue),
                            side: BorderSide(
                              color:
                              isSelected ? Colors.green : Colors.grey.shade400,
                              width: 2,
                            ),
                          ),
                          elevation: 4,
                          child: Padding(
                            padding: const EdgeInsets.all(12),
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(icon,
                                    size: 40,
                                    color: isSelected
                                        ? Colors.green.shade700
                                        : Colors.grey.shade600),
                                const SizedBox(height: 12),
                                Text(
                                  area,
                                  textAlign: TextAlign.center,
                                  style: GoogleFonts.openSans(
                                    fontSize: 14,
                                    fontWeight: FontWeight.w600,
                                    color: isSelected
                                        ? Colors.green.shade700
                                        : Colors.black87,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                )
              )
            ),

            // Add this under the GridView, above the Continue button
            TextButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (_) => const LLMSurfaceHelpPage(),
                  ),
                );
              },
              child: Text(
                "Don’t understand? Click here to describe in your own words",
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.blue.shade700,
                  decoration: TextDecoration.underline,
                ),
              ),
            ),


            // Continue Button
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: (!_isFullPentest && (widget.scopeCard.selectedAreas[widget.categoryName]?.isEmpty ?? true))
                  ? null
                  : () {
                final attackSurface = _isFullPentest
                    ? const AttackSurface.full()
                    : AttackSurface.custom(_selectedAreas.toList());

                Navigator.pop(context);

                // Navigator.push(
                //   context,
                //   MaterialPageRoute(
                //     builder: (context) => NetworkScanPage(attackSurface: attackSurface),
                //   ),
                // );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green.shade600,
                minimumSize: const Size(double.infinity, 50),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(borderRadiusValue),
                ),
              ),
              child: const Text("Continue",
                  style: TextStyle(fontSize: 18)),
            ),
          ],
        ),
      ),
    );
  }
}

